import json
from datetime import datetime

CATEGORIES = ["Food", "Transport", "Entertainment", "Utilities", "Other"]

def load_expenses(filename='expenses.json'):
    try:
        with open(filename, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_expenses(expenses, filename='expenses.json'):
    with open(filename, 'w') as file:
        json.dump(expenses, file, indent=4)

def add_expense(expenses):
    try:
        amount = float(input("Enter amount: "))
        category = select_category()
        date_str = input("Enter date (YYYY-MM-DD) or press Enter to use today: ")
        if date_str.strip() == "":
            date_str = datetime.now().strftime('%Y-%m-%d')

        try:
            date = datetime.strptime(date_str, '%Y-%m-%d').date()
        except ValueError:
            print("Invalid date format. Please use YYYY-MM-DD.")
            return

        expense = {
            "amount": amount,
            "category": category,
            "date": str(date)
        }

        expenses.append(expense)
        save_expenses(expenses)
        print("Expense added successfully!")

    except ValueError:
        print("Invalid input. Please enter a valid amount.")

# Select an expense category
def select_category():
    print("\nExpense Categories:")
    for i, category in enumerate(CATEGORIES, 1):
        print(f"{i}. {category}")
    
    try:
        choice = int(input("Choose a category number: "))
        if 1 <= choice <= len(CATEGORIES):
            return CATEGORIES[choice - 1]
        else:
            print("Invalid choice. Defaulting to 'Other'.")
            return "Other"
    except ValueError:
        print("Invalid input. Defaulting to 'Other'.")
        return "Other"

# View all expenses
def view_expenses(expenses):
    if not expenses:
        print("No expenses recorded.")
    else:
        print("\n--- Expenses ---")
        for i, expense in enumerate(expenses, start=1):
            print(f"{i}. Amount: ${expense['amount']}, Category: {expense['category']}, Date: {expense['date']}")
        print("\nTotal Expenses: ${:.2f}".format(sum(exp['amount'] for exp in expenses)))

# View expenses by category
def view_by_category(expenses):
    if not expenses:
        print("No expenses recorded.")
        return

    print("\nCategory-wise Expenditure:")
    category_totals = {category: 0 for category in CATEGORIES}
    
    for expense in expenses:
        category_totals[expense['category']] += expense['amount']

    for category, total in category_totals.items():
        print(f"{category}: ${total:.2f}")

# View monthly summary
def monthly_summary(expenses):
    if not expenses:
        print("No expenses recorded.")
        return

    month_totals = {}
    
    for expense in expenses:
        month = expense['date'][:7]  # Extract YYYY-MM part
        if month in month_totals:
            month_totals[month] += expense['amount']
        else:
            month_totals[month] = expense['amount']

    print("\n--- Monthly Summary ---")
    for month, total in month_totals.items():
        print(f"{month}: ${total:.2f}")

# Delete an expense
def delete_expense(expenses):
    if not expenses:
        print("No expenses to delete.")
        return

    view_expenses(expenses)
    try:
        index = int(input("Enter the number of the expense to delete: ")) - 1
        if 0 <= index < len(expenses):
            removed_expense = expenses.pop(index)
            save_expenses(expenses)
            print(f"Expense of ${removed_expense['amount']} deleted.")
        else:
            print("Invalid selection.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

# Main menu
def main():
    expenses = load_expenses()

    while True:
        print("\nExpense Tracker Menu:")
        print("1. Add Expense")
        print("2. View All Expenses")
        print("3. View Expenses by Category")
        print("4. Monthly Summary")
        print("5. Delete an Expense")
        print("6. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            add_expense(expenses)
        elif choice == '2':
            view_expenses(expenses)
        elif choice == '3':
            view_by_category(expenses)
        elif choice == '4':
            monthly_summary(expenses)
        elif choice == '5':
            delete_expense(expenses)
        elif choice == '6':
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please select again.")

if __name__ == "__main__":
    main()
